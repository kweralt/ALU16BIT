// cycles through the states to display the values for A, B and output from the ALU when input signal is HIGH
// DONE displays d
// ERROR displays E

module alu_statement_tester #(
    INPUT_A,
    INPUT_B,
    OPCODE,
    EXPECTED
  )
  (
    input clk,  
    input rst,  
    input start,
    output io_seg[8],
    output io_sel[4],
    output opcode_led[6],
    output done
  ) 
  {
  
  .clk(clk) {
    edge_detector slow_clk_edge(#RISE(1), #FALL(0));
    
    .rst(rst){
      fsm state = {INIT, DISP_A_1, DISP_A_2, DISP_B_1, DISP_B_2, DISP_O_1, DISP_O_2, DONE, ERROR_1, ERROR_2};
      dff o[16];
      counter slow_clock (#SIZE(1), #DIV(24)); // clock with period ~ 0.65s
      multi_seven_seg seg_display;
    }
  }
  
  sig alufn[6];
  sig a[16];
  sig b[16];
  alu16bit alu (.alufn(alufn), .a(a), .b(b));
  
  always {
    done = 0;
    slow_clk_edge.in = slow_clock.value;
    io_seg = 8bzzzzzzzz;
    io_sel = 4bzzzz;
    seg_display.values = {4b0,4b0,4b0,4b0};
    
    
    alufn = OPCODE;
    a = INPUT_A;
    b = INPUT_B;
    o.d = alu.o;
    
    opcode_led = OPCODE;
    
    case (state.q){
      state.INIT:
        if (start)
          state.d = state.DISP_A_1;
      
      state.DISP_A_1:
        io_seg = 8b10001000;
        io_sel = 4b1110;
        if (slow_clk_edge.out)
          state.d = state.DISP_A_2;
        
      
      state.DISP_A_2:
        seg_display.values = {a[15:12], a[11:8], a[7:4], a[3:0]};
        io_seg = ~seg_display.seg;
        io_sel = ~seg_display.sel;
        if (slow_clk_edge.out)
          state.d = state.DISP_B_1;
      
        
      state.DISP_B_1:
        io_seg = 8b10000011;
        io_sel = 4b1110;
        if (slow_clk_edge.out)
          state.d = state.DISP_B_2;
      
          
      state.DISP_B_2:
        seg_display.values = {b[15:12], b[11:8], b[7:4], b[3:0]};
        io_seg = ~seg_display.seg;
        io_sel = ~seg_display.sel;
        if (slow_clk_edge.out)
          state.d = state.DISP_O_1;
       
         
      state.DISP_O_1:
        io_seg = 8b11000000;
        io_sel = 4b1110;
        if (slow_clk_edge.out)
          state.d = state.DISP_O_2;
        
        
      state.DISP_O_2:
        seg_display.values = {o.q[15:12], o.q[11:8], o.q[7:4], o.q[3:0]};
        io_seg = ~seg_display.seg;
        io_sel = ~seg_display.sel;
        
        if (slow_clk_edge.out && o.q == EXPECTED)
          state.d = state.DONE;
        else if (slow_clk_edge.out && o.q != EXPECTED)  
          state.d = state.ERROR_1;
          
      state.DONE:
        io_seg = 8b10100001;
        io_sel = 4b1110;
        opcode_led = 6b000000;
        done = 1;
        
      state.ERROR_1:
        seg_display.values = {o.q[15:12], o.q[11:8], o.q[7:4], o.q[3:0]};
        io_seg = ~seg_display.seg;
        io_sel = ~seg_display.sel;
        
        if (slow_clk_edge.out)
          state.d = state.ERROR_2;
        
      state.ERROR_2:
        io_seg = 8b10000110;
        io_sel = 4b1110;
        
      }
      
  }
}
